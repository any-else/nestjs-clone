import { Request, Response } from 'express';
import { CloudinaryService } from 'nestjs-cloudinary';
import { Category } from 'src/typeorm/entities/Category.entity';
import { Collection } from 'src/typeorm/entities/Collection.entity';
import { Color } from 'src/typeorm/entities/Color.entity';
import { Product } from 'src/typeorm/entities/Product.entity';
import { ProductVariant } from 'src/typeorm/entities/ProductVariant.entity';
import { Size } from 'src/typeorm/entities/Size.entity';
import { ColorServiceType } from 'src/types/types';
import { Repository } from 'typeorm';
import { ImageShow } from 'src/typeorm/entities/ImageShow.entity';
import { ProductVariantSize } from 'src/typeorm/entities/ProductVariantSize.entity';
import { Brand } from 'src/typeorm/entities/Brand.entity';
export declare class ProductService {
    private ProductRepository;
    private ProductVariantRepository;
    private ProductVariantSizeRepository;
    private ColorRepository;
    private BrandRepository;
    private SizeRepository;
    private CategoryRepository;
    private CollectionRepository;
    private cloudinaryService;
    private ImageShowRepository;
    constructor(ProductRepository: Repository<Product>, ProductVariantRepository: Repository<ProductVariant>, ProductVariantSizeRepository: Repository<ProductVariantSize>, ColorRepository: Repository<Color>, BrandRepository: Repository<Brand>, SizeRepository: Repository<Size>, CategoryRepository: Repository<Category>, CollectionRepository: Repository<Collection>, cloudinaryService: CloudinaryService, ImageShowRepository: Repository<ImageShow>);
    findAllProductService(idCategory: number, res: Response): Promise<Response<any, Record<string, any>>>;
    findLimitProductService(res: Response): Promise<Response<any, Record<string, any>>>;
    findProductCollection(idCollection: number, idColor: number[], idSize: number[], idBrand: number[], idCategory: number[], available: string, page: number, limit: number, res: Response): Promise<Response<any, Record<string, any>>>;
    findEachProduct(idProduct: number, res: Response): Promise<Response<any, Record<string, any>>>;
    findEachBySlug(slug: string, res: Response): Promise<Response<any, Record<string, any>>>;
    createProduct(createproductDetail: any, res: Response, req: Request): Promise<Response<any, Record<string, any>>>;
    deleteProduct(idProd: number, res: Response): Promise<void>;
    createProductVariant(createProductVariantDetail: ColorServiceType, idProd: number, res: Response): Promise<ProductVariant>;
    createProductVariantSize(createProductVariantSizeDetail: any, res: Response): Promise<void>;
    updateProduct(idProduct: number, updateProductService: any, res: Response, req: Request): Promise<void>;
    deleteProductVariant(idVariant: number, res: Response): Promise<Response<any, Record<string, any>>>;
    deleteProductVariantSize(idVariantSize: number, res: Response): Promise<Response<any, Record<string, any>>>;
    deleteImageSlideShow(idImageShow: number, res: Response): Promise<Response<any, Record<string, any>>>;
}
